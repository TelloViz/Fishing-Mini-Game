/* This class should handle read/write to/from the config file for fish */



#pragma once
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <map>
#include <fstream>

using std::cout; using std::cerr;
using std::endl; using std::string;
using std::map;  using std::ifstream; 
using std::vector; using std::fstream;

const string
DEFAULT_WINDOW_WIDTH{ "DEFAULT_WINDOW_WIDTH" },
DEFAULT_WINDOW_HEIGHT{ "DEFAULT_WINDOW_HEIGHT" },
DEFAULT_CANVAS_WIDTH{ "DEFAULT_CANVAS_WIDTH" },
DEFAULT_CANVAS_HEIGHT{ "DEFAULT_CANVAS_HEIGHT" },
CANVAS_X_POS{ "CANVAS_X_POS" },
CANVAS_Y_POS{ "CANVAS_Y_POS" },
TIMER_DURATION_SECS{ "TIMER_DURATION_SECS" },
DEFAULT_TIMER_WIDTH{ "DEFAULT_TIMER_WIDTH" },
MAX_TIMER_HEIGHT{ "MAX_TIMER_HEIGHT" },
MIN_TIMER_HEIGHT{ "MIN_TIMER_HEIGHT" },
TIMER_X{ "TIMER_X" },
TIMER_Y{ "TIMER_Y" },
DEFAULT_TIMER_COLOR_R{ "DEFAULT_TIMER_COLOR_R" },
DEFAULT_TIMER_COLOR_G{ "DEFAULT_TIMER_COLOR_G" },
DEFAULT_TIMER_COLOR_B{ "DEFAULT_TIMER_COLOR_B" },
DEFAULT_TIMER_COLOR_A{ "DEFAULT_TIMER_COLOR_A" },
PLAYER_INDICATOR_WIDTH{ "PLAYER_INDICATOR_WIDTH" },
PLAYER_INDICATOR_HEIGHT{ "PLAYER_INDICATOR_HEIGHT" },
PLAYER_X_POS{ "PLAYER_X_POS" },
PLAYER_Y_POS{ "PLAYER_Y_POS" },
DEFUALT_PLAYER_INDICATOR_COLOR_R{ "DEFUALT_PLAYER_INDICATOR_COLOR_R" },
DEFUALT_PLAYER_INDICATOR_COLOR_G{ "DEFUALT_PLAYER_INDICATOR_COLOR_G" },
DEFUALT_PLAYER_INDICATOR_COLOR_B{ "DEFUALT_PLAYER_INDICATOR_COLOR_B" },
DEFUALT_PLAYER_INDICATOR_COLOR_A{ "DEFUALT_PLAYER_INDICATOR_COLOR_A" },
POSITIVE_INDICATOR_COLOR_R{ "POSITIVE_INDICATOR_COLOR_R" },
POSITIVE_INDICATOR_COLOR_G{ "POSITIVE_INDICATOR_COLOR_G" },
POSITIVE_INDICATOR_COLOR_B{ "POSITIVE_INDICATOR_COLOR_B" },
POSITIVE_INDICATOR_COLOR_A{ "POSITIVE_INDICATOR_COLOR_A" },
MARKER_DROP_RATE{ "MARKER_DROP_RATE" },
MARKER_RISE_RATE{ "MARKER_RISE_RATE" },
MARKER_BOTTOM_LIMIT{ "MARKER_BOTTOM_LIMIT" },
MARKER_TOP_LIMIT{ "MARKER_TOP_LIMIT" },
DEFAULT_FISH_WIDTH{ "DEFAULT_FISH_WIDTH" },
DEFAULT_FISH_HEIGHT{ "DEFAULT_FISH_HEIGHT" },
DEFAULT_FISH_X_POS{ "DEFAULT_FISH_X_POS" },
DEFAULT_FISH_Y_POS{ "DEFAULT_FISH_Y_POS" },
DEFAULT_FISH_COLOR_R{ "DEFAULT_FISH_COLOR_R" },
DEFAULT_FISH_COLOR_G{ "DEFAULT_FISH_COLOR_G" },
DEFAULT_FISH_COLOR_B{ "DEFAULT_FISH_COLOR_B" },
DEFAULT_FISH_COLOR_A{ "DEFAULT_FISH_COLOR_A" },
FRAMES_PER_FISH_POS{ "FRAMES_PER_FISH_POS" },
FRAMES_REMAINING{ "FRAMES_REMAINING" },
FISH_ICON_PATH{ "FISH_ICON_PATH" },
BG_IMAGE_PATH{ "BG_IMAGE_PATH" },
FISH_DIFFICULTY{ "FISH_DIFFICULTY" };

class ConfigHandler
{
public:
     bool ReadConfigFile();
     bool WriteConfigFile();
     bool FindConfig(string key, string& value);
     bool AlterValue(string key, string newVal);

     


private:
     
     bool ParseConfigFile(const vector<string>& lines);
     map<string, string> configValueMap;
     vector<string> keys;


          


};

